// <auto-generated />
using System;
using Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoriaId");

                    b.ToTable("Categoria", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriaId = 1,
                            Descripcion = "Tecnología"
                        },
                        new
                        {
                            CategoriaId = 2,
                            Descripcion = "Marketing"
                        },
                        new
                        {
                            CategoriaId = 3,
                            Descripcion = "Diseño"
                        },
                        new
                        {
                            CategoriaId = 4,
                            Descripcion = "Administración"
                        },
                        new
                        {
                            CategoriaId = 5,
                            Descripcion = "Finanzas"
                        },
                        new
                        {
                            CategoriaId = 6,
                            Descripcion = "Recursos humanos"
                        },
                        new
                        {
                            CategoriaId = 7,
                            Descripcion = "Ventas"
                        },
                        new
                        {
                            CategoriaId = 8,
                            Descripcion = "Servicio al cliente"
                        },
                        new
                        {
                            CategoriaId = 9,
                            Descripcion = "Logística"
                        },
                        new
                        {
                            CategoriaId = 10,
                            Descripcion = "Producción"
                        },
                        new
                        {
                            CategoriaId = 11,
                            Descripcion = "Educación"
                        },
                        new
                        {
                            CategoriaId = 12,
                            Descripcion = "Salud"
                        },
                        new
                        {
                            CategoriaId = 13,
                            Descripcion = "Investigación"
                        },
                        new
                        {
                            CategoriaId = 14,
                            Descripcion = "Arte y cultura"
                        },
                        new
                        {
                            CategoriaId = 15,
                            Descripcion = "Medios de comunicación"
                        },
                        new
                        {
                            CategoriaId = 16,
                            Descripcion = "Derecho"
                        },
                        new
                        {
                            CategoriaId = 17,
                            Descripcion = "Profesorado"
                        },
                        new
                        {
                            CategoriaId = 18,
                            Descripcion = "Ingeniería"
                        },
                        new
                        {
                            CategoriaId = 19,
                            Descripcion = "Mecànica"
                        },
                        new
                        {
                            CategoriaId = 20,
                            Descripcion = "Agricultura"
                        },
                        new
                        {
                            CategoriaId = 21,
                            Descripcion = "Medio ambiente"
                        },
                        new
                        {
                            CategoriaId = 22,
                            Descripcion = "Gastronomía"
                        },
                        new
                        {
                            CategoriaId = 23,
                            Descripcion = "Gestión de proyectos"
                        },
                        new
                        {
                            CategoriaId = 24,
                            Descripcion = "Consultoría"
                        },
                        new
                        {
                            CategoriaId = 25,
                            Descripcion = "Análisis de datos"
                        },
                        new
                        {
                            CategoriaId = 26,
                            Descripcion = "Química"
                        },
                        new
                        {
                            CategoriaId = 27,
                            Descripcion = "Medicina"
                        },
                        new
                        {
                            CategoriaId = 28,
                            Descripcion = "Enfermería"
                        },
                        new
                        {
                            CategoriaId = 29,
                            Descripcion = "Psicología"
                        },
                        new
                        {
                            CategoriaId = 30,
                            Descripcion = "Trabajo social"
                        },
                        new
                        {
                            CategoriaId = 31,
                            Descripcion = "Arquitectura"
                        },
                        new
                        {
                            CategoriaId = 32,
                            Descripcion = "Fotografía"
                        },
                        new
                        {
                            CategoriaId = 33,
                            Descripcion = "Estadística"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Experiencia", b =>
                {
                    b.Property<int>("ExperienciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienciaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExperienciaId");

                    b.ToTable("Experiencia", (string)null);

                    b.HasData(
                        new
                        {
                            ExperienciaId = 1,
                            Nombre = "Sin Experiencia"
                        },
                        new
                        {
                            ExperienciaId = 2,
                            Nombre = "1 Año"
                        },
                        new
                        {
                            ExperienciaId = 3,
                            Nombre = "2 Años"
                        },
                        new
                        {
                            ExperienciaId = 4,
                            Nombre = "3 Años"
                        },
                        new
                        {
                            ExperienciaId = 5,
                            Nombre = "4 Años"
                        },
                        new
                        {
                            ExperienciaId = 6,
                            Nombre = "5 Años"
                        },
                        new
                        {
                            ExperienciaId = 7,
                            Nombre = "6 Años"
                        },
                        new
                        {
                            ExperienciaId = 8,
                            Nombre = "7 Años"
                        },
                        new
                        {
                            ExperienciaId = 9,
                            Nombre = "8 Años"
                        });
                });

            modelBuilder.Entity("Domain.Entities.NivelEstudio", b =>
                {
                    b.Property<int>("NivelEstudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NivelEstudioId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NivelEstudioId");

                    b.ToTable("NivelEstudios", (string)null);

                    b.HasData(
                        new
                        {
                            NivelEstudioId = 1,
                            Nombre = "Primaria"
                        },
                        new
                        {
                            NivelEstudioId = 2,
                            Nombre = "Secundaria"
                        },
                        new
                        {
                            NivelEstudioId = 3,
                            Nombre = "Terciario"
                        },
                        new
                        {
                            NivelEstudioId = 4,
                            Nombre = "Universitario"
                        },
                        new
                        {
                            NivelEstudioId = 5,
                            Nombre = "Posgrado"
                        },
                        new
                        {
                            NivelEstudioId = 6,
                            Nombre = "Master"
                        },
                        new
                        {
                            NivelEstudioId = 7,
                            Nombre = "Doctorado"
                        },
                        new
                        {
                            NivelEstudioId = 8,
                            Nombre = "Sin estudios"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Oferta", b =>
                {
                    b.Property<Guid>("OfertaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CuidadId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienciaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("NivelEstudioId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<int>("Salario")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OfertaId");

                    b.HasIndex("ExperienciaId");

                    b.HasIndex("NivelEstudioId");

                    b.ToTable("Oferta", (string)null);

                    b.HasData(
                        new
                        {
                            OfertaId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            CuidadId = 0,
                            Descripcion = "Buscamos Desarrollador .NET Junior/Ssr. para sumarse a importante empresa de producto IT, líder en la creación de soluciones para el sector de salud.",
                            EmpresaId = 1,
                            ExperienciaId = 3,
                            Fecha = new DateTime(2023, 4, 22, 8, 5, 19, 374, DateTimeKind.Unspecified).AddTicks(9336),
                            NivelEstudioId = 4,
                            ProvinciaId = 6,
                            Salario = 200000,
                            Status = true,
                            Titulo = "Desarrollador .NET Junior/Ssr."
                        },
                        new
                        {
                            OfertaId = new Guid("f1b4f44e-05fb-4062-a247-6830964ef063"),
                            CuidadId = 0,
                            Descripcion = "Buscamos Desarrollador .NET Junior/Ssr. para sumarse a importante empresa de producto IT, líder en la creación de soluciones para el sector de salud.",
                            EmpresaId = 2,
                            ExperienciaId = 1,
                            Fecha = new DateTime(2023, 3, 22, 8, 4, 50, 928, DateTimeKind.Unspecified).AddTicks(6762),
                            NivelEstudioId = 3,
                            ProvinciaId = 6,
                            Salario = 120000,
                            Status = true,
                            Titulo = "Desarrollador .NET Junior."
                        },
                        new
                        {
                            OfertaId = new Guid("ee69bf0e-735f-44ff-9712-96830fddbf3a"),
                            CuidadId = 0,
                            Descripcion = "Buscamos AUXLIAR DE OPERACIONES SISTEMAS.",
                            EmpresaId = 2,
                            ExperienciaId = 1,
                            Fecha = new DateTime(2023, 4, 23, 8, 5, 19, 374, DateTimeKind.Unspecified).AddTicks(9336),
                            NivelEstudioId = 4,
                            ProvinciaId = 6,
                            Salario = 150000,
                            Status = true,
                            Titulo = "Analista programador/a de sistemas."
                        },
                        new
                        {
                            OfertaId = new Guid("3da7995a-715f-40b8-8121-b2ffdee778b0"),
                            CuidadId = 0,
                            Descripcion = "Buscamos Desarrollador SQL Server Junior/SSR. para sumarse a importante empresa de producto IT, líder en la creación de soluciones para el sector de salud.",
                            EmpresaId = 2,
                            ExperienciaId = 3,
                            Fecha = new DateTime(2023, 5, 22, 12, 13, 20, 71, DateTimeKind.Unspecified).AddTicks(9537),
                            NivelEstudioId = 4,
                            ProvinciaId = 6,
                            Salario = 220000,
                            Status = true,
                            Titulo = "Desarrollador SQL Server Jr/SSr"
                        },
                        new
                        {
                            OfertaId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            CuidadId = 0,
                            Descripcion = "En Ecosistemas, buscamos un Desarrollador Java Jr/Ssr para sumar al equipo de nuestro cliente, en relación directa con el mismo.",
                            EmpresaId = 3,
                            ExperienciaId = 1,
                            Fecha = new DateTime(2023, 3, 22, 12, 11, 59, 975, DateTimeKind.Unspecified).AddTicks(193),
                            NivelEstudioId = 2,
                            ProvinciaId = 6,
                            Salario = 180000,
                            Status = true,
                            Titulo = "Desarrollador Java Jr."
                        },
                        new
                        {
                            OfertaId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            CuidadId = 0,
                            Descripcion = "En Ecosistemas estamos en la búsqueda de un Administrador de Backups Ssr/Sr para sumarse a nuestro equipo",
                            EmpresaId = 3,
                            ExperienciaId = 3,
                            Fecha = new DateTime(2023, 4, 22, 8, 5, 20, 446, DateTimeKind.Unspecified).AddTicks(6304),
                            NivelEstudioId = 3,
                            ProvinciaId = 6,
                            Salario = 250000,
                            Status = true,
                            Titulo = "Administrador de Infraestructura Ssr."
                        },
                        new
                        {
                            OfertaId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            CuidadId = 0,
                            Descripcion = "Desde Ecosistemas nos encontramos en la búsqueda de un Analista Funcional Jr/Ssr, para sumarse al equipo de nuestro cliente, empresa agropecuaria.",
                            EmpresaId = 3,
                            ExperienciaId = 2,
                            Fecha = new DateTime(2023, 4, 22, 7, 50, 18, 989, DateTimeKind.Unspecified).AddTicks(830),
                            NivelEstudioId = 3,
                            ProvinciaId = 6,
                            Salario = 200000,
                            Status = true,
                            Titulo = "Analista Funcional Jr o Ssr."
                        },
                        new
                        {
                            OfertaId = new Guid("1d394678-e0eb-4620-a1de-f01c7768ddb3"),
                            CuidadId = 0,
                            Descripcion = "Importante empresa Autopartista se encuentra en la búsqueda de Programador Robotista.",
                            EmpresaId = 1,
                            ExperienciaId = 2,
                            Fecha = new DateTime(2023, 4, 22, 10, 27, 32, 895, DateTimeKind.Unspecified).AddTicks(6499),
                            NivelEstudioId = 4,
                            ProvinciaId = 6,
                            Salario = 200000,
                            Status = true,
                            Titulo = "Programador Robotista."
                        },
                        new
                        {
                            OfertaId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            CuidadId = 0,
                            Descripcion = "Estamos en la búsqueda de Responsable general para empresa con negocios en rubro inmobiliario y de playas de estacionamiento.",
                            EmpresaId = 4,
                            ExperienciaId = 3,
                            Fecha = new DateTime(2023, 4, 23, 10, 27, 32, 895, DateTimeKind.Unspecified).AddTicks(6499),
                            NivelEstudioId = 5,
                            ProvinciaId = 6,
                            Salario = 200000,
                            Status = true,
                            Titulo = "Administrador/ Contador."
                        });
                });

            modelBuilder.Entity("Domain.Entities.OfertaCategoria", b =>
                {
                    b.Property<int>("OfertaCategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfertaCategoriaId"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<Guid>("OfertaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("OfertaCategoriaId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("OfertaId");

                    b.ToTable("OfertaCategoria", (string)null);

                    b.HasData(
                        new
                        {
                            OfertaCategoriaId = 1,
                            CategoriaId = 1,
                            OfertaId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 2,
                            CategoriaId = 3,
                            OfertaId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 3,
                            CategoriaId = 1,
                            OfertaId = new Guid("f1b4f44e-05fb-4062-a247-6830964ef063"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 4,
                            CategoriaId = 3,
                            OfertaId = new Guid("f1b4f44e-05fb-4062-a247-6830964ef063"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 5,
                            CategoriaId = 1,
                            OfertaId = new Guid("ee69bf0e-735f-44ff-9712-96830fddbf3a"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 6,
                            CategoriaId = 25,
                            OfertaId = new Guid("ee69bf0e-735f-44ff-9712-96830fddbf3a"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 7,
                            CategoriaId = 33,
                            OfertaId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 8,
                            CategoriaId = 25,
                            OfertaId = new Guid("3da7995a-715f-40b8-8121-b2ffdee778b0"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 9,
                            CategoriaId = 33,
                            OfertaId = new Guid("3da7995a-715f-40b8-8121-b2ffdee778b0"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 10,
                            CategoriaId = 23,
                            OfertaId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 11,
                            CategoriaId = 25,
                            OfertaId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 12,
                            CategoriaId = 33,
                            OfertaId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 13,
                            CategoriaId = 4,
                            OfertaId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 14,
                            CategoriaId = 18,
                            OfertaId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 15,
                            CategoriaId = 23,
                            OfertaId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 16,
                            CategoriaId = 25,
                            OfertaId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 17,
                            CategoriaId = 31,
                            OfertaId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 18,
                            CategoriaId = 1,
                            OfertaId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 19,
                            CategoriaId = 4,
                            OfertaId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 20,
                            CategoriaId = 25,
                            OfertaId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 21,
                            CategoriaId = 18,
                            OfertaId = new Guid("1d394678-e0eb-4620-a1de-f01c7768ddb3"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 22,
                            CategoriaId = 19,
                            OfertaId = new Guid("1d394678-e0eb-4620-a1de-f01c7768ddb3"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 23,
                            CategoriaId = 4,
                            OfertaId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 24,
                            CategoriaId = 5,
                            OfertaId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            Status = true
                        },
                        new
                        {
                            OfertaCategoriaId = 25,
                            CategoriaId = 24,
                            OfertaId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Postulacion", b =>
                {
                    b.Property<int>("PostulacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostulacionId"));

                    b.Property<int>("AspiranteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfertaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TipoEstadoPostulacionId")
                        .HasColumnType("int");

                    b.HasKey("PostulacionId");

                    b.HasIndex("OfertaId");

                    b.HasIndex("TipoEstadoPostulacionId")
                        .IsUnique();

                    b.ToTable("Postulacion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoEstadoPostulacion", b =>
                {
                    b.Property<int>("TipoEstadoPostulacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoEstadoPostulacionId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TipoEstadoPostulacionId");

                    b.ToTable("TipoEstadoPostulacion", (string)null);

                    b.HasData(
                        new
                        {
                            TipoEstadoPostulacionId = 1,
                            Descripcion = "Postulado"
                        },
                        new
                        {
                            TipoEstadoPostulacionId = 2,
                            Descripcion = "CV Visto"
                        },
                        new
                        {
                            TipoEstadoPostulacionId = 3,
                            Descripcion = "En evaluación"
                        },
                        new
                        {
                            TipoEstadoPostulacionId = 4,
                            Descripcion = "Finalista"
                        },
                        new
                        {
                            TipoEstadoPostulacionId = 5,
                            Descripcion = "Proceso finalizado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Oferta", b =>
                {
                    b.HasOne("Domain.Entities.Experiencia", "Experiencia")
                        .WithMany("Oferta")
                        .HasForeignKey("ExperienciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.NivelEstudio", "NivelEstudio")
                        .WithMany("Oferta")
                        .HasForeignKey("NivelEstudioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Experiencia");

                    b.Navigation("NivelEstudio");
                });

            modelBuilder.Entity("Domain.Entities.OfertaCategoria", b =>
                {
                    b.HasOne("Domain.Entities.Categoria", "Categoria")
                        .WithMany("OfertaCategoria")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Oferta", "Oferta")
                        .WithMany("OfertaCategoria")
                        .HasForeignKey("OfertaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Oferta");
                });

            modelBuilder.Entity("Domain.Entities.Postulacion", b =>
                {
                    b.HasOne("Domain.Entities.Oferta", "Oferta")
                        .WithMany("Postulacion")
                        .HasForeignKey("OfertaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoEstadoPostulacion", "TipoEstadoPostulacion")
                        .WithOne("Postulacion")
                        .HasForeignKey("Domain.Entities.Postulacion", "TipoEstadoPostulacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oferta");

                    b.Navigation("TipoEstadoPostulacion");
                });

            modelBuilder.Entity("Domain.Entities.Categoria", b =>
                {
                    b.Navigation("OfertaCategoria");
                });

            modelBuilder.Entity("Domain.Entities.Experiencia", b =>
                {
                    b.Navigation("Oferta");
                });

            modelBuilder.Entity("Domain.Entities.NivelEstudio", b =>
                {
                    b.Navigation("Oferta");
                });

            modelBuilder.Entity("Domain.Entities.Oferta", b =>
                {
                    b.Navigation("OfertaCategoria");

                    b.Navigation("Postulacion");
                });

            modelBuilder.Entity("Domain.Entities.TipoEstadoPostulacion", b =>
                {
                    b.Navigation("Postulacion")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
